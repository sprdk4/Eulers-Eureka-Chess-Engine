//
// Created by Shawn Roach on 3/1/2017.
//

#ifndef CPP_CLIENT_BITMATH_H
#define CPP_CLIENT_BITMATH_H


#include <vector>

namespace BitBoard {
    typedef unsigned long long int u64;

    struct fixedShiftFancyMagic {
        u64 *const resultTableOffset;
        const u64 mask;
        const u64 magic;
    };

    void createMagicLookupTable();

    u64 getLegalRookAttacks(const u64 occ, const u64 bitIndex);

    u64 getLegalBishopAttacks(const u64 occ, const u64 bitIndex);


    //reference for forEachBitIndex_i math
    //https://chessprogramming.wikispaces.com/Efficient+Generation+of+Sliding+Piece+Attacks
    //see Bit-Twiddling relying on the Two's Complement
    // need multiples to allow for nesting for loops
    inline u64 rotateLeft(u64 a, int shift) { return (a << shift) | (a >> (64 - shift)); }

    inline u64 rotateRight(u64 a, int shift) { return (a >> shift) | (a << (64 - shift)); }

#define forEachBitIndex_i(bitboard)  for(u64 board=bitboard,i=board&-board;board;board&=board-1,i=board&-board)
#define forEachBitIndex_n(bitboard)  for(u64 board=bitboard,n=board&-board;board;board&=board-1,n=board&-board)
#define forEachTableIndex_i(bitboard)  for(u64 board=bitboard,i=toTableIndex(board);board;board&=board-1,i=toTableIndex(board))
#define forEachTableIndex_n(bitboard)  for(u64 board=bitboard,n=toTableIndex(board);board;board&=board-1,n=toTableIndex(board))


    u64 toBitIndex(const std::string &file, const int rank);

    u64 toBitIndex(const int row, const int col);

    uint32_t toTableIndex(const u64 bitIndex);// { return __builtin_ctzll(bitIndex); }

    unsigned toRankIndex(const u64 i);

    unsigned toFileIndex(const u64 i);

    std::string toFile(const u64 i);

    int toRank(const u64 i);


    void printAsBoard(const u64 board);

    void printAsBoard(const std::string &boardTitle, const u64 board);

    void printAsBoard(const std::vector< std::string>& boardTitle, const std::vector< u64>& board);

    constexpr u64 whiteKingCastle = 0b0000000000000000000000000000000000000000000000000000000010010000ULL;
    constexpr u64 blackKingCastle = 0b1001000000000000000000000000000000000000000000000000000000000000ULL;
    constexpr u64 whiteQueenCastle = 0b0000000000000000000000000000000000000000000000000000000000010001ULL;
    constexpr u64 blackQueenCastle = 0b0001000100000000000000000000000000000000000000000000000000000000ULL;
    constexpr u64 whiteKingCastleMask = 0b0000000000000000000000000000000000000000000000000000000000100000ULL |
                                        0b0000000000000000000000000000000000000000000000000000000001000000ULL;
    constexpr u64 blackKingCastleMask = 0b0010000000000000000000000000000000000000000000000000000000000000ULL |
                                        0b0100000000000000000000000000000000000000000000000000000000000000ULL;
    constexpr u64 whiteQueenCastleMask = 0b0000000000000000000000000000000000000000000000000000000000000100ULL |
                                         0b0000000000000000000000000000000000000000000000000000000000001000ULL;
    constexpr u64 blackQueenCastleMask = 0b0000010000000000000000000000000000000000000000000000000000000000ULL |
                                         0b0000100000000000000000000000000000000000000000000000000000000000ULL;
    constexpr u64 whiteQueenCastleEmpties = whiteQueenCastleMask | 0b0000000000000000000000000000000000000000000000000000000000000010ULL;
    constexpr u64 blackQueenCastleEmpties = blackQueenCastleMask | 0b0000001000000000000000000000000000000000000000000000000000000000ULL;
    constexpr u64 whiteKingCastleLanding = 0b0000000000000000000000000000000000000000000000000000000001000000ULL;
    constexpr u64 blackKingCastleLanding = 0b0100000000000000000000000000000000000000000000000000000000000000ULL;
    constexpr u64 whiteQueenCastleLanding = 0b0000000000000000000000000000000000000000000000000000000000000100ULL;
    constexpr u64 blackQueenCastleLanding = 0b0000010000000000000000000000000000000000000000000000000000000000ULL;
    constexpr u64 whiteKingRookCastleLanding = 0b0000000000000000000000000000000000000000000000000000000000100000ULL;
    constexpr u64 blackKingRookCastleLanding = 0b0010000000000000000000000000000000000000000000000000000000000000ULL;
    constexpr u64 whiteQueenRookCastleLanding = 0b0000000000000000000000000000000000000000000000000000000000001000ULL;
    constexpr u64 blackQueenRookCastleLanding = 0b0000100000000000000000000000000000000000000000000000000000000000ULL;
    constexpr u64 whiteKingRookCastleStart = 0b0000000000000000000000000000000000000000000000000000000010000000ULL;
    constexpr u64 blackKingRookCastleStart = 0b1000000000000000000000000000000000000000000000000000000000000000ULL;
    constexpr u64 whiteQueenRookCastleStart = 0b0000000000000000000000000000000000000000000000000000000000000001ULL;
    constexpr u64 blackQueenRookCastleStart = 0b0000000100000000000000000000000000000000000000000000000000000000ULL;

    struct castleMasks {
        u64 castle;//represents the start location of the rook and the king that will be doing the castle
        u64 castlemask;//represent locations that king will have to pass through
        u64 empties;//represents locations that must be empty in order to allow castling
        u64 kingLanding;//where king should end up
        u64 rookLanding;//where rook shuold end up
        u64 rookStart;//where rook should start
    };
    constexpr castleMasks CastleMasks[2][2] =
            {
                    {
                            {blackKingCastle, blackKingCastleMask, blackKingCastleMask, blackKingCastleLanding, blackKingRookCastleLanding,
                                    blackKingRookCastleStart},
                            {blackQueenCastle, blackQueenCastleMask, blackQueenCastleEmpties, blackQueenCastleLanding,
                                    blackQueenRookCastleLanding,
                                    blackQueenRookCastleStart}
                    },
                    {
                            {whiteKingCastle, whiteKingCastleMask, whiteKingCastleMask, whiteKingCastleLanding, whiteKingRookCastleLanding,
                                    whiteKingRookCastleStart},
                            {whiteQueenCastle, whiteQueenCastleMask, whiteQueenCastleEmpties, whiteQueenCastleLanding,
                                    whiteQueenRookCastleLanding,
                                    whiteQueenRookCastleStart}
                    }
            };
/*
    std::cout<<"constexpr u64 ranks[8]={\n";
    for(int row=0;row<8;row++){
        u64 rank=0;
        for(int x=0;x<8;x++)
            rank|=toBitIndex(row,x);
        std::cout<<"0b"<<std::bitset<64>(rank)<<",\n";
    }
    std::cout<<"}\n";
 */
    constexpr u64 ranks[8] = {
            0b0000000000000000000000000000000000000000000000000000000011111111ULL,
            0b0000000000000000000000000000000000000000000000001111111100000000ULL,
            0b0000000000000000000000000000000000000000111111110000000000000000ULL,
            0b0000000000000000000000000000000011111111000000000000000000000000ULL,
            0b0000000000000000000000001111111100000000000000000000000000000000ULL,
            0b0000000000000000111111110000000000000000000000000000000000000000ULL,
            0b0000000011111111000000000000000000000000000000000000000000000000ULL,
            0b1111111100000000000000000000000000000000000000000000000000000000ULL,
    };

/*
    std::cout<<"constexpr u64 files[8]={\n";
    for(int row=0;row<8;row++){
        u64 rank=0;
        for(int x=0;x<8;x++)
            rank|=toBitIndex(x,row);
        std::cout<<"0b"<<std::bitset<64>(rank)<<",\n";
    }
    std::cout<<"}\n";
 */
    constexpr u64 files[8] = {
            0b0000000100000001000000010000000100000001000000010000000100000001ULL,
            0b0000001000000010000000100000001000000010000000100000001000000010ULL,
            0b0000010000000100000001000000010000000100000001000000010000000100ULL,
            0b0000100000001000000010000000100000001000000010000000100000001000ULL,
            0b0001000000010000000100000001000000010000000100000001000000010000ULL,
            0b0010000000100000001000000010000000100000001000000010000000100000ULL,
            0b0100000001000000010000000100000001000000010000000100000001000000ULL,
            0b1000000010000000100000001000000010000000100000001000000010000000ULL,
    };
/*
    std::cout<<"constexpr u64 rookAttacks[64]={\n";
    for(int row=0;row<8;row++){
        for(int col=0;col<8;col++) {
            u64 i=ranks[row]^files[col];
            std::cout << "0b" << std::bitset<64>(i) << ",\n";
        }
    }
    std::cout<<"};\n";
*/
    constexpr u64 rookAttacks[64] = {
            0b0000000100000001000000010000000100000001000000010000000111111110ULL,
            0b0000001000000010000000100000001000000010000000100000001011111101ULL,
            0b0000010000000100000001000000010000000100000001000000010011111011ULL,
            0b0000100000001000000010000000100000001000000010000000100011110111ULL,
            0b0001000000010000000100000001000000010000000100000001000011101111ULL,
            0b0010000000100000001000000010000000100000001000000010000011011111ULL,
            0b0100000001000000010000000100000001000000010000000100000010111111ULL,
            0b1000000010000000100000001000000010000000100000001000000001111111ULL,
            0b0000000100000001000000010000000100000001000000011111111000000001ULL,
            0b0000001000000010000000100000001000000010000000101111110100000010ULL,
            0b0000010000000100000001000000010000000100000001001111101100000100ULL,
            0b0000100000001000000010000000100000001000000010001111011100001000ULL,
            0b0001000000010000000100000001000000010000000100001110111100010000ULL,
            0b0010000000100000001000000010000000100000001000001101111100100000ULL,
            0b0100000001000000010000000100000001000000010000001011111101000000ULL,
            0b1000000010000000100000001000000010000000100000000111111110000000ULL,
            0b0000000100000001000000010000000100000001111111100000000100000001ULL,
            0b0000001000000010000000100000001000000010111111010000001000000010ULL,
            0b0000010000000100000001000000010000000100111110110000010000000100ULL,
            0b0000100000001000000010000000100000001000111101110000100000001000ULL,
            0b0001000000010000000100000001000000010000111011110001000000010000ULL,
            0b0010000000100000001000000010000000100000110111110010000000100000ULL,
            0b0100000001000000010000000100000001000000101111110100000001000000ULL,
            0b1000000010000000100000001000000010000000011111111000000010000000ULL,
            0b0000000100000001000000010000000111111110000000010000000100000001ULL,
            0b0000001000000010000000100000001011111101000000100000001000000010ULL,
            0b0000010000000100000001000000010011111011000001000000010000000100ULL,
            0b0000100000001000000010000000100011110111000010000000100000001000ULL,
            0b0001000000010000000100000001000011101111000100000001000000010000ULL,
            0b0010000000100000001000000010000011011111001000000010000000100000ULL,
            0b0100000001000000010000000100000010111111010000000100000001000000ULL,
            0b1000000010000000100000001000000001111111100000001000000010000000ULL,
            0b0000000100000001000000011111111000000001000000010000000100000001ULL,
            0b0000001000000010000000101111110100000010000000100000001000000010ULL,
            0b0000010000000100000001001111101100000100000001000000010000000100ULL,
            0b0000100000001000000010001111011100001000000010000000100000001000ULL,
            0b0001000000010000000100001110111100010000000100000001000000010000ULL,
            0b0010000000100000001000001101111100100000001000000010000000100000ULL,
            0b0100000001000000010000001011111101000000010000000100000001000000ULL,
            0b1000000010000000100000000111111110000000100000001000000010000000ULL,
            0b0000000100000001111111100000000100000001000000010000000100000001ULL,
            0b0000001000000010111111010000001000000010000000100000001000000010ULL,
            0b0000010000000100111110110000010000000100000001000000010000000100ULL,
            0b0000100000001000111101110000100000001000000010000000100000001000ULL,
            0b0001000000010000111011110001000000010000000100000001000000010000ULL,
            0b0010000000100000110111110010000000100000001000000010000000100000ULL,
            0b0100000001000000101111110100000001000000010000000100000001000000ULL,
            0b1000000010000000011111111000000010000000100000001000000010000000ULL,
            0b0000000111111110000000010000000100000001000000010000000100000001ULL,
            0b0000001011111101000000100000001000000010000000100000001000000010ULL,
            0b0000010011111011000001000000010000000100000001000000010000000100ULL,
            0b0000100011110111000010000000100000001000000010000000100000001000ULL,
            0b0001000011101111000100000001000000010000000100000001000000010000ULL,
            0b0010000011011111001000000010000000100000001000000010000000100000ULL,
            0b0100000010111111010000000100000001000000010000000100000001000000ULL,
            0b1000000001111111100000001000000010000000100000001000000010000000ULL,
            0b1111111000000001000000010000000100000001000000010000000100000001ULL,
            0b1111110100000010000000100000001000000010000000100000001000000010ULL,
            0b1111101100000100000001000000010000000100000001000000010000000100ULL,
            0b1111011100001000000010000000100000001000000010000000100000001000ULL,
            0b1110111100010000000100000001000000010000000100000001000000010000ULL,
            0b1101111100100000001000000010000000100000001000000010000000100000ULL,
            0b1011111101000000010000000100000001000000010000000100000001000000ULL,
            0b0111111110000000100000001000000010000000100000001000000010000000ULL,
    };

    /*
        std::cout << "constexpr u64 getLegalBishopAttacks[64]={\n";
        for (int row = 0; row < 8; row++) {
            for (int col = 0; col < 8; col++) {
                u64 i = toBitIndex(row, col);
                for (int r=row,c=col; r < 8 && c < 8; r++, c++)
                    i |= toBitIndex(r, c);
                for (int r=row,c=col; r < 8 && c >= 0; r++, c--)
                    i |= toBitIndex(r, c);
                for (int r=row,c=col; r >= 0 && c < 8; r--, c++)
                    i |= toBitIndex(r, c);
                for (int r=row,c=col; r >= 0 && c >= 0; r--, c--)
                    i |= toBitIndex(r, c);
                i = i & ~toBitIndex(row, col);
                std::cout << "0b" << std::bitset<64>(i) << ",\n";
                //printAsBoard(i);
            }
        }
        std::cout << "};\n";
         */
    constexpr u64 bishopAttacks[64] = {
            0b1000000001000000001000000001000000001000000001000000001000000000ULL,
            0b0000000010000000010000000010000000010000000010000000010100000000ULL,
            0b0000000000000000100000000100000000100000000100010000101000000000ULL,
            0b0000000000000000000000001000000001000001001000100001010000000000ULL,
            0b0000000000000000000000000000000110000010010001000010100000000000ULL,
            0b0000000000000000000000010000001000000100100010000101000000000000ULL,
            0b0000000000000001000000100000010000001000000100001010000000000000ULL,
            0b0000000100000010000001000000100000010000001000000100000000000000ULL,
            0b0100000000100000000100000000100000000100000000100000000000000010ULL,
            0b1000000001000000001000000001000000001000000001010000000000000101ULL,
            0b0000000010000000010000000010000000010001000010100000000000001010ULL,
            0b0000000000000000100000000100000100100010000101000000000000010100ULL,
            0b0000000000000000000000011000001001000100001010000000000000101000ULL,
            0b0000000000000001000000100000010010001000010100000000000001010000ULL,
            0b0000000100000010000001000000100000010000101000000000000010100000ULL,
            0b0000001000000100000010000001000000100000010000000000000001000000ULL,
            0b0010000000010000000010000000010000000010000000000000001000000100ULL,
            0b0100000000100000000100000000100000000101000000000000010100001000ULL,
            0b1000000001000000001000000001000100001010000000000000101000010001ULL,
            0b0000000010000000010000010010001000010100000000000001010000100010ULL,
            0b0000000000000001100000100100010000101000000000000010100001000100ULL,
            0b0000000100000010000001001000100001010000000000000101000010001000ULL,
            0b0000001000000100000010000001000010100000000000001010000000010000ULL,
            0b0000010000001000000100000010000001000000000000000100000000100000ULL,
            0b0001000000001000000001000000001000000000000000100000010000001000ULL,
            0b0010000000010000000010000000010100000000000001010000100000010000ULL,
            0b0100000000100000000100010000101000000000000010100001000100100000ULL,
            0b1000000001000001001000100001010000000000000101000010001001000001ULL,
            0b0000000110000010010001000010100000000000001010000100010010000010ULL,
            0b0000001000000100100010000101000000000000010100001000100000000100ULL,
            0b0000010000001000000100001010000000000000101000000001000000001000ULL,
            0b0000100000010000001000000100000000000000010000000010000000010000ULL,
            0b0000100000000100000000100000000000000010000001000000100000010000ULL,
            0b0001000000001000000001010000000000000101000010000001000000100000ULL,
            0b0010000000010001000010100000000000001010000100010010000001000000ULL,
            0b0100000100100010000101000000000000010100001000100100000110000000ULL,
            0b1000001001000100001010000000000000101000010001001000001000000001ULL,
            0b0000010010001000010100000000000001010000100010000000010000000010ULL,
            0b0000100000010000101000000000000010100000000100000000100000000100ULL,
            0b0001000000100000010000000000000001000000001000000001000000001000ULL,
            0b0000010000000010000000000000001000000100000010000001000000100000ULL,
            0b0000100000000101000000000000010100001000000100000010000001000000ULL,
            0b0001000100001010000000000000101000010001001000000100000010000000ULL,
            0b0010001000010100000000000001010000100010010000011000000000000000ULL,
            0b0100010000101000000000000010100001000100100000100000000100000000ULL,
            0b1000100001010000000000000101000010001000000001000000001000000001ULL,
            0b0001000010100000000000001010000000010000000010000000010000000010ULL,
            0b0010000001000000000000000100000000100000000100000000100000000100ULL,
            0b0000001000000000000000100000010000001000000100000010000001000000ULL,
            0b0000010100000000000001010000100000010000001000000100000010000000ULL,
            0b0000101000000000000010100001000100100000010000001000000000000000ULL,
            0b0001010000000000000101000010001001000001100000000000000000000000ULL,
            0b0010100000000000001010000100010010000010000000010000000000000000ULL,
            0b0101000000000000010100001000100000000100000000100000000100000000ULL,
            0b1010000000000000101000000001000000001000000001000000001000000001ULL,
            0b0100000000000000010000000010000000010000000010000000010000000010ULL,
            0b0000000000000010000001000000100000010000001000000100000010000000ULL,
            0b0000000000000101000010000001000000100000010000001000000000000000ULL,
            0b0000000000001010000100010010000001000000100000000000000000000000ULL,
            0b0000000000010100001000100100000110000000000000000000000000000000ULL,
            0b0000000000101000010001001000001000000001000000000000000000000000ULL,
            0b0000000001010000100010000000010000000010000000010000000000000000ULL,
            0b0000000010100000000100000000100000000100000000100000000100000000ULL,
            0b0000000001000000001000000001000000001000000001000000001000000001ULL,
    };


    /*
    std::cout << "constexpr u64 queenAttacks[64]={\n";
    for(int x=0;x<64;x++){
            u64 i=rookAttacks[x]|bishopAttacks[x];
            std::cout << "0b" << std::bitset<64>(i) << ",\n";
            //printAsBoard(i);
    }
    std::cout << "};\n";
    */
    constexpr u64 queenAttacks[64] = {
            0b1000000101000001001000010001000100001001000001010000001111111110,
            0b0000001010000010010000100010001000010010000010100000011111111101,
            0b0000010000000100100001000100010000100100000101010000111011111011,
            0b0000100000001000000010001000100001001001001010100001110011110111,
            0b0001000000010000000100000001000110010010010101000011100011101111,
            0b0010000000100000001000010010001000100100101010000111000011011111,
            0b0100000001000001010000100100010001001000010100001110000010111111,
            0b1000000110000010100001001000100010010000101000001100000001111111,
            0b0100000100100001000100010000100100000101000000111111111000000011,
            0b1000001001000010001000100001001000001010000001111111110100000111,
            0b0000010010000100010001000010010000010101000011101111101100001110,
            0b0000100000001000100010000100100100101010000111001111011100011100,
            0b0001000000010000000100011001001001010100001110001110111100111000,
            0b0010000000100001001000100010010010101000011100001101111101110000,
            0b0100000101000010010001000100100001010000111000001011111111100000,
            0b1000001010000100100010001001000010100000110000000111111111000000,
            0b0010000100010001000010010000010100000011111111100000001100000101,
            0b0100001000100010000100100000101000000111111111010000011100001010,
            0b1000010001000100001001000001010100001110111110110000111000010101,
            0b0000100010001000010010010010101000011100111101110001110000101010,
            0b0001000000010001100100100101010000111000111011110011100001010100,
            0b0010000100100010001001001010100001110000110111110111000010101000,
            0b0100001001000100010010000101000011100000101111111110000001010000,
            0b1000010010001000100100001010000011000000011111111100000010100000,
            0b0001000100001001000001010000001111111110000000110000010100001001,
            0b0010001000010010000010100000011111111101000001110000101000010010,
            0b0100010000100100000101010000111011111011000011100001010100100100,
            0b1000100001001001001010100001110011110111000111000010101001001001,
            0b0001000110010010010101000011100011101111001110000101010010010010,
            0b0010001000100100101010000111000011011111011100001010100000100100,
            0b0100010001001000010100001110000010111111111000000101000001001000,
            0b1000100010010000101000001100000001111111110000001010000010010000,
            0b0000100100000101000000111111111000000011000001010000100100010001,
            0b0001001000001010000001111111110100000111000010100001001000100010,
            0b0010010000010101000011101111101100001110000101010010010001000100,
            0b0100100100101010000111001111011100011100001010100100100110001000,
            0b1001001001010100001110001110111100111000010101001001001000010001,
            0b0010010010101000011100001101111101110000101010000010010000100010,
            0b0100100001010000111000001011111111100000010100000100100001000100,
            0b1001000010100000110000000111111111000000101000001001000010001000,
            0b0000010100000011111111100000001100000101000010010001000100100001,
            0b0000101000000111111111010000011100001010000100100010001001000010,
            0b0001010100001110111110110000111000010101001001000100010010000100,
            0b0010101000011100111101110001110000101010010010011000100000001000,
            0b0101010000111000111011110011100001010100100100100001000100010000,
            0b1010100001110000110111110111000010101000001001000010001000100001,
            0b0101000011100000101111111110000001010000010010000100010001000010,
            0b1010000011000000011111111100000010100000100100001000100010000100,
            0b0000001111111110000000110000010100001001000100010010000101000001,
            0b0000011111111101000001110000101000010010001000100100001010000010,
            0b0000111011111011000011100001010100100100010001001000010000000100,
            0b0001110011110111000111000010101001001001100010000000100000001000,
            0b0011100011101111001110000101010010010010000100010001000000010000,
            0b0111000011011111011100001010100000100100001000100010000100100000,
            0b1110000010111111111000000101000001001000010001000100001001000001,
            0b1100000001111111110000001010000010010000100010001000010010000010,
            0b1111111000000011000001010000100100010001001000010100000110000001,
            0b1111110100000111000010100001001000100010010000101000001000000010,
            0b1111101100001110000101010010010001000100100001000000010000000100,
            0b1111011100011100001010100100100110001000000010000000100000001000,
            0b1110111100111000010101001001001000010001000100000001000000010000,
            0b1101111101110000101010000010010000100010001000010010000000100000,
            0b1011111111100000010100000100100001000100010000100100000101000000,
            0b0111111111000000101000001001000010001000100001001000001010000001,
    };


    /*
        std::cout<<"constexpr u64 knightAttacks[64]={\n";
        for(int row=0;row<8;row++){
            for(int col=0;col<8;col++) {
                Coordinate i={row,col};
                u64 knightMask=0;
                for (Direction dir: {Knight1, Knight2, Knight3, Knight4, Knight5, Knight6, Knight7, Knight8}) {
                    auto c=i+dir;
                    if(c.col>=0&&c.col<8 && c.row>=0 && c.row<8){
                        knightMask|=toBitIndex(c.row,c.col);
                    }
                }
                printAsBoard(knightMask);
                std::cout << "0b" << std::bitset<64>(knightMask) << ",\n";
            }
        }
        std::cout<<"};\n";
        */
    constexpr u64 knightAttacks[64] = {
            0b0000000000000000000000000000000000000000000000100000010000000000,
            0b0000000000000000000000000000000000000000000001010000100000000000,
            0b0000000000000000000000000000000000000000000010100001000100000000,
            0b0000000000000000000000000000000000000000000101000010001000000000,
            0b0000000000000000000000000000000000000000001010000100010000000000,
            0b0000000000000000000000000000000000000000010100001000100000000000,
            0b0000000000000000000000000000000000000000101000000001000000000000,
            0b0000000000000000000000000000000000000000010000000010000000000000,
            0b0000000000000000000000000000000000000010000001000000000000000100,
            0b0000000000000000000000000000000000000101000010000000000000001000,
            0b0000000000000000000000000000000000001010000100010000000000010001,
            0b0000000000000000000000000000000000010100001000100000000000100010,
            0b0000000000000000000000000000000000101000010001000000000001000100,
            0b0000000000000000000000000000000001010000100010000000000010001000,
            0b0000000000000000000000000000000010100000000100000000000000010000,
            0b0000000000000000000000000000000001000000001000000000000000100000,
            0b0000000000000000000000000000001000000100000000000000010000000010,
            0b0000000000000000000000000000010100001000000000000000100000000101,
            0b0000000000000000000000000000101000010001000000000001000100001010,
            0b0000000000000000000000000001010000100010000000000010001000010100,
            0b0000000000000000000000000010100001000100000000000100010000101000,
            0b0000000000000000000000000101000010001000000000001000100001010000,
            0b0000000000000000000000001010000000010000000000000001000010100000,
            0b0000000000000000000000000100000000100000000000000010000001000000,
            0b0000000000000000000000100000010000000000000001000000001000000000,
            0b0000000000000000000001010000100000000000000010000000010100000000,
            0b0000000000000000000010100001000100000000000100010000101000000000,
            0b0000000000000000000101000010001000000000001000100001010000000000,
            0b0000000000000000001010000100010000000000010001000010100000000000,
            0b0000000000000000010100001000100000000000100010000101000000000000,
            0b0000000000000000101000000001000000000000000100001010000000000000,
            0b0000000000000000010000000010000000000000001000000100000000000000,
            0b0000000000000010000001000000000000000100000000100000000000000000,
            0b0000000000000101000010000000000000001000000001010000000000000000,
            0b0000000000001010000100010000000000010001000010100000000000000000,
            0b0000000000010100001000100000000000100010000101000000000000000000,
            0b0000000000101000010001000000000001000100001010000000000000000000,
            0b0000000001010000100010000000000010001000010100000000000000000000,
            0b0000000010100000000100000000000000010000101000000000000000000000,
            0b0000000001000000001000000000000000100000010000000000000000000000,
            0b0000001000000100000000000000010000000010000000000000000000000000,
            0b0000010100001000000000000000100000000101000000000000000000000000,
            0b0000101000010001000000000001000100001010000000000000000000000000,
            0b0001010000100010000000000010001000010100000000000000000000000000,
            0b0010100001000100000000000100010000101000000000000000000000000000,
            0b0101000010001000000000001000100001010000000000000000000000000000,
            0b1010000000010000000000000001000010100000000000000000000000000000,
            0b0100000000100000000000000010000001000000000000000000000000000000,
            0b0000010000000000000001000000001000000000000000000000000000000000,
            0b0000100000000000000010000000010100000000000000000000000000000000,
            0b0001000100000000000100010000101000000000000000000000000000000000,
            0b0010001000000000001000100001010000000000000000000000000000000000,
            0b0100010000000000010001000010100000000000000000000000000000000000,
            0b1000100000000000100010000101000000000000000000000000000000000000,
            0b0001000000000000000100001010000000000000000000000000000000000000,
            0b0010000000000000001000000100000000000000000000000000000000000000,
            0b0000000000000100000000100000000000000000000000000000000000000000,
            0b0000000000001000000001010000000000000000000000000000000000000000,
            0b0000000000010001000010100000000000000000000000000000000000000000,
            0b0000000000100010000101000000000000000000000000000000000000000000,
            0b0000000001000100001010000000000000000000000000000000000000000000,
            0b0000000010001000010100000000000000000000000000000000000000000000,
            0b0000000000010000101000000000000000000000000000000000000000000000,
            0b0000000000100000010000000000000000000000000000000000000000000000,
    };


    /*
        std::cout<<"constexpr u64 kingAttacks[64]={\n";
        for(int row=0;row<8;row++){
            for(int col=0;col<8;col++) {
                Coordinate i={row,col};
                u64 kingMask=0;
                for (Direction dir: {NorthEast, NorthWest, SouthEast, SouthWest, Up, Down, Left, Right}) {
                    auto c=i+dir;
                    if(c.col>=0&&c.col<8 && c.row>=0 && c.row<8){
                        kingMask|=toBitIndex(c.row,c.col);
                    }
                }
                //printAsBoard(kingMask);
                std::cout << "0b" << std::bitset<64>(kingMask) << ",\n";
            }
        }
        std::cout<<"};\n";
         */
    constexpr u64 kingAttacks[64] = {
            0b0000000000000000000000000000000000000000000000000000001100000010,
            0b0000000000000000000000000000000000000000000000000000011100000101,
            0b0000000000000000000000000000000000000000000000000000111000001010,
            0b0000000000000000000000000000000000000000000000000001110000010100,
            0b0000000000000000000000000000000000000000000000000011100000101000,
            0b0000000000000000000000000000000000000000000000000111000001010000,
            0b0000000000000000000000000000000000000000000000001110000010100000,
            0b0000000000000000000000000000000000000000000000001100000001000000,
            0b0000000000000000000000000000000000000000000000110000001000000011,
            0b0000000000000000000000000000000000000000000001110000010100000111,
            0b0000000000000000000000000000000000000000000011100000101000001110,
            0b0000000000000000000000000000000000000000000111000001010000011100,
            0b0000000000000000000000000000000000000000001110000010100000111000,
            0b0000000000000000000000000000000000000000011100000101000001110000,
            0b0000000000000000000000000000000000000000111000001010000011100000,
            0b0000000000000000000000000000000000000000110000000100000011000000,
            0b0000000000000000000000000000000000000011000000100000001100000000,
            0b0000000000000000000000000000000000000111000001010000011100000000,
            0b0000000000000000000000000000000000001110000010100000111000000000,
            0b0000000000000000000000000000000000011100000101000001110000000000,
            0b0000000000000000000000000000000000111000001010000011100000000000,
            0b0000000000000000000000000000000001110000010100000111000000000000,
            0b0000000000000000000000000000000011100000101000001110000000000000,
            0b0000000000000000000000000000000011000000010000001100000000000000,
            0b0000000000000000000000000000001100000010000000110000000000000000,
            0b0000000000000000000000000000011100000101000001110000000000000000,
            0b0000000000000000000000000000111000001010000011100000000000000000,
            0b0000000000000000000000000001110000010100000111000000000000000000,
            0b0000000000000000000000000011100000101000001110000000000000000000,
            0b0000000000000000000000000111000001010000011100000000000000000000,
            0b0000000000000000000000001110000010100000111000000000000000000000,
            0b0000000000000000000000001100000001000000110000000000000000000000,
            0b0000000000000000000000110000001000000011000000000000000000000000,
            0b0000000000000000000001110000010100000111000000000000000000000000,
            0b0000000000000000000011100000101000001110000000000000000000000000,
            0b0000000000000000000111000001010000011100000000000000000000000000,
            0b0000000000000000001110000010100000111000000000000000000000000000,
            0b0000000000000000011100000101000001110000000000000000000000000000,
            0b0000000000000000111000001010000011100000000000000000000000000000,
            0b0000000000000000110000000100000011000000000000000000000000000000,
            0b0000000000000011000000100000001100000000000000000000000000000000,
            0b0000000000000111000001010000011100000000000000000000000000000000,
            0b0000000000001110000010100000111000000000000000000000000000000000,
            0b0000000000011100000101000001110000000000000000000000000000000000,
            0b0000000000111000001010000011100000000000000000000000000000000000,
            0b0000000001110000010100000111000000000000000000000000000000000000,
            0b0000000011100000101000001110000000000000000000000000000000000000,
            0b0000000011000000010000001100000000000000000000000000000000000000,
            0b0000001100000010000000110000000000000000000000000000000000000000,
            0b0000011100000101000001110000000000000000000000000000000000000000,
            0b0000111000001010000011100000000000000000000000000000000000000000,
            0b0001110000010100000111000000000000000000000000000000000000000000,
            0b0011100000101000001110000000000000000000000000000000000000000000,
            0b0111000001010000011100000000000000000000000000000000000000000000,
            0b1110000010100000111000000000000000000000000000000000000000000000,
            0b1100000001000000110000000000000000000000000000000000000000000000,
            0b0000001000000011000000000000000000000000000000000000000000000000,
            0b0000010100000111000000000000000000000000000000000000000000000000,
            0b0000101000001110000000000000000000000000000000000000000000000000,
            0b0001010000011100000000000000000000000000000000000000000000000000,
            0b0010100000111000000000000000000000000000000000000000000000000000,
            0b0101000001110000000000000000000000000000000000000000000000000000,
            0b1010000011100000000000000000000000000000000000000000000000000000,
            0b0100000011000000000000000000000000000000000000000000000000000000,
    };

}
#endif //CPP_CLIENT_BITMATH_H
